/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void buildTree(vector<int> v, TreeNode *node){
        int pos = v.size()/2;
        node->val = v[pos];
        if(pos!=0){
            vector<int> left(v.begin(), v.begin()+pos);
            if(left.size()>0){
                node->left = new TreeNode();
                buildTree(left, node->left);
            }
            vector<int> right(v.begin()+pos+1, v.end());
            if(right.size()>0){
                node->right = new TreeNode();
                buildTree(right, node->right);
            }
        }
    }
public:
    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> v;
        TreeNode *root=NULL;
        if(head!=NULL){
            while(head){
                v.push_back(head->val);
                head=head->next;
            }
            root = new TreeNode();
            buildTree(v, root); //to make t in tree order
        }
        return root;
    }
};