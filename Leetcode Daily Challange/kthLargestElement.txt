class Solution {
 int partition(vector<int> &nums, int l, int r){
    int pivot = nums[r];
    int i = l-1, j = l, temp;
    for(; j<r; j++){
        if(nums[j]>=pivot){
            i++;
            temp = nums[j];
            nums[j] = nums[i];
            nums[i] = temp;
        }
    }
    nums[r] = nums[++i];
    nums[i] = pivot;
    return i;
 }
 int quickSelect(vector<int> &nums, int l, int r, int k){
     if(l<r){
         int n = partition(nums, l, r);
         if(n == k-1)
             return nums[n];
         else if(n > k-1)
             return quickSelect(nums, l, n-1, k);
         else    return quickSelect(nums, n+1, r, k);
     }
     return nums[l];
 }

 public: int findKthLargest(vector<int>& nums, int k) {
        return quickSelect(nums, 0, nums.size()-1, k);
    }
};